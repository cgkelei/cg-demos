<Effect name="LightingUtil">
<ShaderSource>
	<![CDATA[

#define saturate(x) clamp(x, 0.0, 1.0)	
	
float DirectionalLighting(const vec3 lightDir, const vec3 normal)
{
	return dot(-lightDir, normal);
}

float PointLighting(const vec3 lightPos, const vec3 litPoint, const vec3 normal)
{
	return dot(normalize(lightPos-litPoint), normal);
}

float SpotLighting(const vec3 lightPos, const vec3 lightDir, const vec2 cosCone, const vec3 litPoint)
{
	// calc the cos angle between lightdir and litpoint dir
	float cosAlpha =  dot(normalize(litPoint - lightPos), lightDir);
	return smoothstep(cosCone.x, cosCone.y, cosAlpha);
}

float CalcShininess(const vec3 halfVec, const vec3 normal, float shinness)
{
	return pow(max(dot(halfVec, normal), 0.0), shinness);
}

float CalcAttenuation(const vec3 lightPos, const vec3 point, const vec3 atten)
{
	float d = distance(lightPos, point);
	return 1.0 / (atten.x + d * atten.y + d * d * atten.z);
}

vec3 CalcPhongSpotLight(const vec3 diffuse, const vec3 specular, float shinness,  const vec3 l, const vec3 h, const vec3 n)
{
	return max((diffuse + specular * CalcShininess(h, n, shinness))* dot(n, l), 0.0);
}

/**
 * @brief Computes the specular contribution of a light
 */
float CalculateSpecular(vec3 N, vec3 H, float specPower)
{
    return pow(saturate(dot(N, H)), specPower);
}

/**
 * @brief Calculate luminance of color
 */
 float Luminance(vec3 color)
 {
	return dot(color, vec3(0.2126, 0.7152, 0.0722));
 }

 /**
 * @brief Calculate the Fresnel factor using Schlick's approximation
 */
vec3 CalculateFresnel(vec3 specAlbedo, vec3 L, vec3 H) 
{
    vec3 fresnel = specAlbedo;
    fresnel += (1.0f - specAlbedo) * pow((1.0f - saturate(dot(L, H))), 5.0f);
    return saturate(fresnel);
}

/**
 * @brief Calculate an approximate Fresnel factor using N dot V instead of L dot H
 *        Which is used for environment map fresnel.
 */
vec3 CalculateAmbiemtFresnel(in vec3 specAlbedo, in vec3 N, in vec3 V) 
{
	vec3 fresnel = specAlbedo;
    fresnel += (1.0f - specAlbedo) * pow((1.0f - saturate(dot(N, V))), 5.0f);
    return saturate(fresnel);
}

	]]>
</ShaderSource>

</Effect>
	