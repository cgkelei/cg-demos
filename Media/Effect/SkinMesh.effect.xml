<Effect name="SkinMesh">

<Shader name="SkinVS" stage="Vertex" entry="main">
<ShaderSource>
<![CDATA[
#version 330

in vec3 Position;
in vec4 BlendWeights;
in uvec4 BlendIndices;
in vec3 Normal;
in vec2 Tex;

out vec3 oNormal;
out vec2 oTex;
out vec3 oLightDir;

const int MAX_MATRICES = 58;

uniform mat4 SkinMatrices[MAX_MATRICES];
uniform mat4 World;
uniform mat4 ViewProj;

vec3 LightPos = vec3(0, 0, 100);

const int NunBones = 4;

void main()
{
	vec4 pos = vec4(0.0f);
	vec4 norm = vec4(0.0f);
	
	for(int i = 0; i < NunBones; ++i)
	{
		pos += BlendWeights[i] * vec4(Position, 1.0) * SkinMatrices[BlendIndices[i]];
		norm += BlendWeights[i] * vec4(Normal, 0.0) * SkinMatrices[BlendIndices[i]];
	}
	
	pos.w = 1.0f;
	norm.w = 0.0f;
	
	// world pos 
	pos = pos * World;
	
	// world normal
	oNormal = vec3(norm * World);
	
	oTex = Tex;
	
#ifndef Direct3D	
	oTex.y = 1.0 - oTex.y;
#endif
	
	oLightDir = LightPos - vec3(pos);
	
	gl_Position = pos * ViewProj;
}
]]>
</ShaderSource>
</Shader>

<Shader name="SkinPS" stage="Pixel" entry="main">
<ShaderSource>
<![CDATA[

#version 330

in vec3 oNormal;
in vec2 oTex;
in vec3 oLightDir;

out vec4 FragColor;

uniform sampler2D DiffuseMap; 
	
void main()
{
	vec3 normal = normalize(oNormal);
	vec3 light = normalize(oLightDir);
	
	vec3 diffuse = vec3( texture(DiffuseMap, oTex) );
	
	vec3 diffuseColor = max( dot(normal, light), 0) * diffuse;
	vec3 anbientColor = diffuse * vec3(0.3f, 0.3f, 0.3f);
	
	FragColor = vec4(  anbientColor + diffuseColor,  1.0);
}

]]>
</ShaderSource>
</Shader>

<Technique name="PhongLight">
	<Pass name="p0">
		<VertexShader name="SkinVS"/>
		<PixelShader name="SkinPS"/>
	</Pass>
</Technique>

</Effect>